# Question 1

1. All of the 11 devices on the local network listed as [MAC - IP]: [04:0c:ce:d8:0f:fa,00:26:08:e5:66:07 - 10.0.2.1], [8c:a9:82:50:f0:a6,00:26:08:e5:66:07 - 10.0.2.1], [ff:ff:ff:ff:ff:ff,00:26:08:e5:66:07 - 10.0.2.1], [00:26:08:e5:66:07,04:0c:ce:d8:0f:fa - 10.0.2.2], [01:00:5e:00:00:fb,04:0c:ce:d8:0f:fa - 10.0.2.2], [ff:ff:ff:ff:ff:ff,04:0c:ce:d8:0f:fa - 10.0.2.2], [00:26:08:e5:66:07,8c:a9:82:50:f0:a6 - 10.0.2.3], [01:00:5e:00:00:fb,8c:a9:82:50:f0:a6 - 10.0.2.3], [01:00:5e:00:00:fc,8c:a9:82:50:f0:a6 - 10.0.2.3], [01:00:5e:7f:ff:fa,8c:a9:82:50:f0:a6 - 10.0.2.3], [ff:ff:ff:ff:ff:ff,8c:a9:82:50:f0:a6 - 10.0.2.3]

# Question 2

2. We have 11 mac addresses, which means there are 11 devices on the local network. Thus it is probably a small, private network in someones apartment or home.

# Question 3

3a. dl.xs4all.nl

3b. Active

3c. FTP doesn't encrypt its packets and thus everything that is transmitted is in plaintext, meaning that sniffing network traffic gives up all the details about what happened and which users used FTP. Using Wireshark, we were able to figure out a username (laticia.langhans) and a password (goblue3859) because of this, which is a huge vulnerability!

3d. SSH File Transfer Protocol (SFTP) and File Transfer Protocol Secure (FTPS)

# Question 4

4a. ctools.umich.edu

4b. No, there is no way that the HTTPS server can protect against this leak. The server cannot hide its IP as it will always be in the metadata of packets and it is necessary for the packets to go to the right places. In this sense, HTTPS doesn't provide privacy as IP's are exposed and thus domain names can be looked up, but HTTPS provides security via encryption so that traffic cannot be read by eavesdroppers.

4c. There are 36 cipher suites provided by the client (listed below), and they use a variety of crypto algorithms such as Triple DES, RSA, MD5, AES, SHA, CBC (Cipher Block Chaining), RC4 (Rivest Cipher 4), and Camellia.
TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA (0xc00a)
TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA (0xc014)
TLS_DHE_RSA_WITH_CAMELLIA_256_CBC_SHA (0x0088)
TLS_DHE_DSS_WITH_CAMELLIA_256_CBC_SHA (0x0087)
TLS_DHE_RSA_WITH_AES_256_CBC_SHA (0x0039)
TLS_DHE_DSS_WITH_AES_256_CBC_SHA (0x0038)
TLS_ECDH_RSA_WITH_AES_256_CBC_SHA (0xc00f)
TLS_ECDH_ECDSA_WITH_AES_256_CBC_SHA (0xc005)
TLS_RSA_WITH_CAMELLIA_256_CBC_SHA (0x0084)
TLS_RSA_WITH_AES_256_CBC_SHA (0x0035)
TLS_ECDHE_ECDSA_WITH_RC4_128_SHA (0xc007)
TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA (0xc009)
TLS_ECDHE_RSA_WITH_RC4_128_SHA (0xc011)
TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA (0xc013)
TLS_DHE_RSA_WITH_CAMELLIA_128_CBC_SHA (0x0045)
TLS_DHE_DSS_WITH_CAMELLIA_128_CBC_SHA (0x0044)
TLS_DHE_DSS_WITH_RC4_128_SHA (0x0066)
TLS_DHE_RSA_WITH_AES_128_CBC_SHA (0x0033)
TLS_DHE_DSS_WITH_AES_128_CBC_SHA (0x0032)
TLS_ECDH_RSA_WITH_RC4_128_SHA (0xc00c)
TLS_ECDH_RSA_WITH_AES_128_CBC_SHA (0xc00e)
TLS_ECDH_ECDSA_WITH_RC4_128_SHA (0xc002)
TLS_ECDH_ECDSA_WITH_AES_128_CBC_SHA (0xc004)
TLS_RSA_WITH_SEED_CBC_SHA (0x0096)
TLS_RSA_WITH_CAMELLIA_128_CBC_SHA (0x0041)
TLS_RSA_WITH_RC4_128_SHA (0x0005)
TLS_RSA_WITH_RC4_128_MD5 (0x0004)
TLS_RSA_WITH_AES_128_CBC_SHA (0x002f)
TLS_ECDHE_ECDSA_WITH_3DES_EDE_CBC_SHA (0xc008)
TLS_ECDHE_RSA_WITH_3DES_EDE_CBC_SHA (0xc012)
TLS_DHE_RSA_WITH_3DES_EDE_CBC_SHA (0x0016)
TLS_DHE_DSS_WITH_3DES_EDE_CBC_SHA (0x0013)
TLS_ECDH_RSA_WITH_3DES_EDE_CBC_SHA (0xc00d)
TLS_ECDH_ECDSA_WITH_3DES_EDE_CBC_SHA (0xc003)
SSL_RSA_FIPS_WITH_3DES_EDE_CBC_SHA (0xfeff)
TLS_RSA_WITH_3DES_EDE_CBC_SHA (0x000a)

4d. The cipher suite TLS_RSA_WITH_RC4_128_MD5 (0x0004) is worrisome as MD5 is outdated, quick to crack and susceptible to hash collisions.

4e. The server chooses to use cipher suite TLS_RSA_WITH_RC4_128_MD5 (0x0004).

# Question 5

5a. After the user successfully logs in, Facebook authenticates plugins using an api key that is visible in all HTTP Get requests. In this case, we can see the variable api_key=116663708370869 passed as a search parameter in the URL.

5b. An attacker could monitor network traffic and see when a user logs in, then use their api key to authenticate with Facebook's api as if they were the user. From the requests we see, the attacker now has access to the like, likebox, and activity api.

5c. Since the user is already authenticated with Facebook's server, they could transmit the api requests over HTTPS. This would hide the api key from attackers and prevent them from liking or sharing items on their behalf.

5d. While on Facebook, the user first reads a blog post about the legality of "wifi sniffing" on blog.erratasec.com. The user then goes back to the homepage and logs in. Finally, (s)he read an article about Venezuela's re-election of Hugo Chavez on aljazeera.com and likes and recommends it on Facebook.
