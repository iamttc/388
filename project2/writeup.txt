Security Recommendations

### SQL Injection ###

*SQL injection vulnerabilities occur when developers allow data
 to be executed as code

*Parametrized queries. This allows database to distinguish between code and data

*Escape user supplied input, especially characters that are special/meaningful characters in the SQL language.
 Sanitizing inputs makes it so that malicious data isn't interpreted as code

*Pattern check the inputs and make sure the input fits the type that they are supposed to be
 (ints are in int format, etc). Strings are a bit trickier but can still be pattern checked so that
 they look like a date, etc

*Secure the SQL database itself by limiting its permissions to only what is needed for the web application
 (Ex: disable access to system tables)



### CSRF ###

*Ensure that there are no XSS vulnerabilities, as if those are present then CSRF defense can be bypassed

*Verify request is same origin. We need to determine the source origin of the request and the target origin of the request
 For the source origin, we can check the referer or origin header (Possible that neither is present.. block?)
 Make sure target (kinda hard to find) matches origin

*CSRF token - unique to each session, large random value made with secure random number generator
 Added as a hidden field for forms or within urls, server rejects requested action if token validation fails

*double cookie?

*Require user interaction again: re-authenticate, captcha, one time token

### XSS ###

There are multiple methods to prevent Cross Site Scripting attacks. The first is to use Content-Security-Headers 
in HTML5 sites. These headers allow the developer to control what types of dynamic content are allowed to load.
You can control tags and sources which are allowed to load in the site. Secondly, to keep session data private,
the developer should allow site access only via HTTPS and turn on the HTTPSOnly cookie flag. This ensures the
browser only serves cookies over HTTPS. Another method to reduce XSS attacks is to sanitize the input string when 
rendering the dynamic content. There are multiple methods to achieve this. Many modern front-end and back-end 
frameworks have built-in functions to remove potentially harmful content, such as Jinja2 templating engine which 
has an 'autoescape' keyword. Sites should also try not to rely on client written HTML and use a different 
formatting language such as Markdown instead. Markdown utilizes a different syntax, allowing the developer 
to safely insert HTML using a Markdown renderer. All harmful HTML tags can safely be removed without loss of
formatting possibilities. As a last resort, the developer could eliminate all HTML entities and tags received 
as input. This, however, could restrict client generated content. 

